% https://ww2.mathworks.cn/help/nnet/ref/trainnetwork.html
%% Train a Convolutional Neural Network Using Data in ImageDatastore 

% Load the data as an |ImageDatastore| object.
url = 'C:\Users\Joe\Desktop\';
digitDatasetPath = fullfile(url, '0209');
digitData = imageDatastore(digitDatasetPath,'IncludeSubfolders',true,'LabelSource','foldernames');
% digitDatasetPath = fullfile(matlabroot,'toolbox','nnet','nndemos',...
%     'nndatasets','DigitDataset');
% digitData = imageDatastore(digitDatasetPath,...
%         'IncludeSubfolders',true,'LabelSource','foldernames');

% %%
% The data store contains 10000 synthetic images of digits 0-9. The images
% are generated by applying random transformations to digit images created
% using different fonts. Each digit image is 28-by-28 pixels.

%% 
% Display some of the images in the datastore. 
% figure;
% perm = randperm(10000,20);
% for i = 1:20
%     subplot(4,5,i);
%     imshow(digitData.Files{perm(i)});
% end

%% 
% Check the number of images in each digit category. 
digitData.countEachLabel 

%%
% The data contains an equal number of images per category.  

%% 
% Divide the data set so that each category in the training set has 750 images
% and the testing set has the remaining images from each label. 
trainingNumFiles = 378;
rng(1) % For reproducibility
[trainDigitData,testDigitData] = splitEachLabel(digitData,...
				trainingNumFiles,'randomize'); 

%%
% |splitEachLabel| splits the image files in |digitData| into two new datastores,
% |trainDigitData| and |testDigitData|.  

%% 
% Define the convolutional neural network architecture. 
layers = [imageInputLayer([224 224 3]);%[28 28 1]
          convolution2dLayer(5,20);
          reluLayer();
          maxPooling2dLayer(2,'Stride',2);
          fullyConnectedLayer(2);%10
          softmaxLayer();
          classificationLayer()];  

%% 
% Set the options to default settings for the stochastic gradient descent
% with momentum. Set the maximum number of epochs at 20, and start the
% training with an initial learning rate of 0.001.
options = trainingOptions('sgdm','MaxEpochs',20,...
	'InitialLearnRate',0.0001);  

%% 
% Train the network. 
convnet = trainNetwork(trainDigitData,layers,options);

%% 
% Run the trained network on the test set that was not used to train the
% network and predict the image labels (digits).
YTest = classify(convnet,testDigitData);
TTest = testDigitData.Labels;

%% 
% Calculate the accuracy. 
accuracy = sum(YTest == TTest)/numel(TTest)   

%%
% Accuracy is the ratio of the number of true labels in the test data
% matching the classifications from classify, to the number of images in
% the test data. In this case about 98.5% of the digit estimations match the
% true digit values in the test set.
